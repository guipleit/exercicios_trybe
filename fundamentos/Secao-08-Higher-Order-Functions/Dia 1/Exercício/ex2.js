// Parte II - Organizando uma biblioteca
// InstruÃ§Ãµes para a realizaÃ§Ã£o dos exercÃ­cios
// Nos exercÃ­cios a seguir, vocÃª trabalharÃ¡ com uma estrutura de dados representando uma lista de livros contendo informaÃ§Ãµes como nome do livro, gÃªnero, pessoa autora do livro e data de lanÃ§amento.
// Em cada exercÃ­cio, serÃ¡ pedido que vocÃª encontre ou produza alguma informaÃ§Ã£o a respeito dessa lista utilizando as funÃ§Ãµes que vocÃª aprendeu hoje. Todos os exercÃ­cios contÃªm um cÃ³digo-base. VocÃª deverÃ¡ copiar esse cÃ³digo e salvÃ¡-lo em um arquivo nomeado conforme o nÃºmero do exercÃ­cio, completando a funÃ§Ã£o vazia.
// Por exemplo, o exercÃ­cio 1 deve ser salvo no arquivo exercise1.js, e assim por diante.
// ðŸš€ Organizando uma biblioteca
// Estes exercÃ­cios praticam os conceitos de Higher Order Functions associados a outros temas de fundamentos jÃ¡ vistos, como arrow functions, template literals e objetos. Essa mistura de conceitos Ã© muito importante para o seu aprendizado, entÃ£o use tudo o que sabe para resolver os exercÃ­cios!
// Utilize o seguinte cÃ³digo como template para realizar os exercÃ­cios:
const books = [
  {
    id: 1,
    name: 'As CrÃ´nicas de Gelo e Fogo',
    genre: 'Fantasia',
    author: {
      name: 'George R. R. Martin',
      birthYear: 1948,
    },
    releaseYear: 1991,
  },
  {
    id: 2,
    name: 'O Senhor dos AnÃ©is',
    genre: 'Fantasia',
    author: {
      name: 'J. R. R. Tolkien',
      birthYear: 1892,
    },
    releaseYear: 1954,
  },
  {
    id: 3,
    name: 'FundaÃ§Ã£o',
    genre: 'FicÃ§Ã£o CientÃ­fica',
    author: {
      name: 'Isaac Asimov',
      birthYear: 1920,
    },
    releaseYear: 1951,
  },
  {
    id: 4,
    name: 'Duna',
    genre: 'FicÃ§Ã£o CientÃ­fica',
    author: {
      name: 'Frank Herbert',
      birthYear: 1920,
    },
    releaseYear: 1965,
  },
  {
    id: 5,
    name: 'A Coisa',
    genre: 'Terror',
    author: {
      name: 'Stephen King',
      birthYear: 1947,
    },
    releaseYear: 1986,
  },
  {
    id: 6,
    name: 'O Chamado de Cthulhu',
    genre: 'Terror',
    author: {
      name: 'H. P. Lovecraft',
      birthYear: 1890,
    },
    releaseYear: 1928,
  },
];

// Encontre o nome da primeira pessoa autora do livro nascida no ano de 1947.
const expectedResult = 'Stephen King';
const authorBornIn1947 = () => {
  return books.find((author) => author.author.birthYear === 1947).author.name
  
}
console.log(authorBornIn1947());

// Retorne o nome do livro com menor nÃºmero de caracteres (menor nome).
const expectedResult2 = 'Duna';
const smallerName = () => {
  let nameBook
  books.forEach((book) => {

     if(!nameBook || book.name.length < nameBook.length) {
        return nameBook = book.name
     } 
  })

  // VariÃ¡vel nameBook que receberÃ¡ o valor do menor nome;
  return nameBook;
}

console.log(smallerName());

// Encontre o primeiro livro cujo nome possua 26 caracteres.

const expectedResult3 = {
  author: {
    birthYear: 1948,
    name: 'George R. R. Martin',
  },
  genre: 'Fantasia',
  id: 1,
  name: 'As CrÃ´nicas de Gelo e Fogo',
  releaseYear: 1991,
};

const getNamedBook = () => {
  return books.find((book) => book.name.length === 26)
}

console.log(getNamedBook());